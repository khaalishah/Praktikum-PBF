{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "Nomor 1"
      ],
      "metadata": {
        "id": "MwHSzrpA8StL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def f(x):\n",
        "  return 4*x\n",
        "\n",
        "def g(x):\n",
        "  return x*x\n",
        "\n",
        "def h(x):\n",
        "  return 3+x\n",
        "\n",
        "#composition\n",
        "h(g(f(4)))"
      ],
      "metadata": {
        "id": "fU9X6jXODudv",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3a5789fa-fc61-4da3-d14d-387babe23c27"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "259"
            ]
          },
          "metadata": {},
          "execution_count": 1
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def compose(f1, f2):\n",
        "  return lambda v: f1(f2(v))\n",
        "\n",
        "hgf = compose(h, compose(g,f))\n",
        "hgf(3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kIx_etMTiD_Q",
        "outputId": "9cb0c490-220b-42b5-9ab6-44cbae0315de"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "147"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Nomor 5 Metode Bisection"
      ],
      "metadata": {
        "id": "ByjhMpOu9g7q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def bisection_method(f, x0, x1, tol):\n",
        "    while True:\n",
        "        x2 = (x0 + x1) / 2\n",
        "        f_x0 = f(x0)\n",
        "        f_x2 = f(x2)\n",
        "\n",
        "        if abs(f_x2) < tol:\n",
        "            return x2\n",
        "\n",
        "        if f_x0 * f_x2 < 0:\n",
        "            x1 = x2\n",
        "        elif f_x0 * f_x2 > 0:\n",
        "            x0 = x2\n",
        "        else:\n",
        "            return x2\n",
        "\n",
        "# Fungsi yang diberikan: f(x) = x - 2^x\n",
        "f = lambda x: x - 2**x\n",
        "\n",
        "# Initial guesses\n",
        "initial_guess_x0 = 0.1\n",
        "initial_guess_x1 = 0.9\n",
        "\n",
        "# Tolerance\n",
        "tolerance = 1e-5\n",
        "\n",
        "# Menjalankan metode bisection\n",
        "root = bisection_method(f, initial_guess_x0, initial_guess_x1, tolerance)\n",
        "print(\"Root found:\", root)\n"
      ],
      "metadata": {
        "id": "h47z752h9h7O",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 315
        },
        "outputId": "62165821-6d24-4b0d-92bf-9ef9b6645d37"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-137271d18b5d>\u001b[0m in \u001b[0;36m<cell line: 28>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     26\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m \u001b[0;31m# Menjalankan metode bisection\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 28\u001b[0;31m \u001b[0mroot\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbisection_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minitial_guess_x0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minitial_guess_x1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtolerance\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     29\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Root found:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mroot\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-1-137271d18b5d>\u001b[0m in \u001b[0;36mbisection_method\u001b[0;34m(f, x0, x1, tol)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mbisection_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtol\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m     \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m         \u001b[0mx2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mx0\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mx1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m         \u001b[0mf_x0\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m         \u001b[0mf_x2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "4KIZcd1Ghi0_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def bisection_method(f, x0, x1, tol, max_iter=1000):\n",
        "    iter_count = 0\n",
        "    while iter_count < max_iter:\n",
        "        x2 = (x0 + x1) / 2\n",
        "        f_x0 = f(x0)\n",
        "        f_x2 = f(x2)\n",
        "\n",
        "        if abs(f_x2) < tol:\n",
        "            return x2\n",
        "\n",
        "        if f_x0 * f_x2 < 0:\n",
        "            x1 = x2\n",
        "        elif f_x0 * f_x2 > 0:\n",
        "            x0 = x2\n",
        "        else:\n",
        "            return x2\n",
        "\n",
        "        iter_count += 1\n",
        "\n",
        "    raise RuntimeError(\"Bisection method did not converge within the maximum number of iterations.\")\n",
        "\n",
        "# Fungsi yang diberikan: f(x) = x - 2^x\n",
        "f = lambda x: x - 2**x\n",
        "\n",
        "# Initial guesses\n",
        "initial_guess_x0 = 0.1\n",
        "initial_guess_x1 = 0.9\n",
        "\n",
        "# Tolerance\n",
        "tolerance = 1e-5\n",
        "\n",
        "# Menjalankan metode bisection\n",
        "try:\n",
        "    root = bisection_method(f, initial_guess_x0, initial_guess_x1, tolerance)\n",
        "    print(\"Root found:\", root)\n",
        "except RuntimeError as e:\n",
        "    print(e)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b-sBSfrf-5wl",
        "outputId": "883eb449-ece3-4247-853a-b4b9ada28916"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Bisection method did not converge within the maximum number of iterations.\n"
          ]
        }
      ]
    }
  ]
}
